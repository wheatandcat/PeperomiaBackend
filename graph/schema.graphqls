# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  "ユーザーID"
  uid: String!
  "役割:(管理権限: admin)"
  role: Int!
  "PUSH通知設定"
  expoPushTokens: [ExpoPushToken]
}

type Calendar {
  id: ID!
  "日付"
  date: String!
  "true: パブリック、false: プライベート"
  public: Boolean!
  "スケジュール"
  item: Item!
}

type Item {
  id: ID!
  "タイトル"
  title: String!
  "種別"
  kind: String!
  "スケジュール詳細"
  itemDetails: [ItemDetail]
}

type ItemDetail {
  id: ID!
  "タイトル"
  title: String!
  itemId: String!
  "種類"
  kind: String!
  moveMinutes: Int!
  place: String!
  "URL"
  url: String!
  "メモ"
  memo: String!
  "表示順"
  priority: Int!
}

type ExpoPushToken {
  id: ID!
  uid: String!
  "デバイスID"
  deviceId: String!
  "トークン"
  token: String!
}

type ShareItem {
  id: ID!
  itemId: String!
  "日付"
  date: String!
  "スケジュール"
  item: Item!
}

type Query {
  "公開アイテムを取得する"
  shareItem(id: ID!): ShareItem
  "ユーザーを取得する"
  user: User
  "カレンダーを期間で取得する"
  calendars(startDate: String!, endDate: String!): [Calendar]
  "カレンダーを取得する"
  calendar(date: String!): Calendar
  "スケジュール詳細を取得する"
  itemDetail(date: String!, itemId: ID!, itemDetailID: ID!): ItemDetail
}

input NewItem {
  "タイトル"
  title: String!
  "種類"
  kind: String!
}

input NewCalendar {
  "日付"
  date: String!
  "スケジュール"
  item: NewItem!
}

input NewItemDetail {
  "日付"
  date: String!
  "タイトル"
  title: String!
  itemId: String!
  kind: String!
  moveMinutes: Int!
  place: String!
  url: String!
  memo: String!
  priority: Int!
}


type Mutation {
  "カレンダーを作成する"
  createCalendar(calendar: NewCalendar!): Calendar!
  "スケジュール詳細を作成する"
  createItemDetail(itemDetail: NewItemDetail!): ItemDetail!
}