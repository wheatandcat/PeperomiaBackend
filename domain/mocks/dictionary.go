// Code generated by MockGen. DO NOT EDIT.
// Source: domain/dictionary.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	firestore "cloud.google.com/go/firestore"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDictionaryRepository is a mock of DictionaryRepository interface
type MockDictionaryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDictionaryRepositoryMockRecorder
}

// MockDictionaryRepositoryMockRecorder is the mock recorder for MockDictionaryRepository
type MockDictionaryRepositoryMockRecorder struct {
	mock *MockDictionaryRepository
}

// NewMockDictionaryRepository creates a new mock instance
func NewMockDictionaryRepository(ctrl *gomock.Controller) *MockDictionaryRepository {
	mock := &MockDictionaryRepository{ctrl: ctrl}
	mock.recorder = &MockDictionaryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDictionaryRepository) EXPECT() *MockDictionaryRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockDictionaryRepository) Find(ctx context.Context, f *firestore.Client, text string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, f, text)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockDictionaryRepositoryMockRecorder) Find(ctx, f, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDictionaryRepository)(nil).Find), ctx, f, text)
}
